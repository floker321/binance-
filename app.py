import streamlit as st
import pandas as pd
import logging
from zone_analyzer import ZoneAnalyzer
from chart_generator import ChartGenerator
from config import TIMEFRAMES
import os
from datetime import datetime

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="Crypto Zone Alert System",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
    <style>
    .main {
        background-color: #0e1117;
    }
    .stAlert {
        background-color: #1e2127;
        border: 1px solid #333;
    }
    div[data-testid="stMetricValue"] {
        font-size: 24px;
    }
    </style>
""", unsafe_allow_html=True)

@st.cache_resource
def get_zone_analyzer():
    return ZoneAnalyzer()

@st.cache_resource
def get_chart_generator():
    return ChartGenerator()

def get_alert_status(current_price, zone, timeframe):
    zone_analyzer = get_zone_analyzer()
    alert_type, zone_key = zone_analyzer.check_price_alert(current_price, zone, timeframe)
    return alert_type

def display_alert_badge(alert_type, zone_type):
    if alert_type == 'approaching':
        emoji = "üîî"
        color = "#FFA500"
        text = "–ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï"
    elif alert_type == 'in_zone':
        emoji = "üéØ"
        color = "#FFFF00"
        text = "–í –ó–û–ù–ï"
    elif alert_type == 'broken':
        emoji = "üí•"
        color = "#FF0000"
        text = "–ü–†–û–ë–ò–¢–ê"
    else:
        return None
    
    zone_color = "#00D9A3" if zone_type == "support" else "#EF5350"
    return f"""
    <div style='
        background: linear-gradient(90deg, {color}22 0%, {zone_color}22 100%);
        border-left: 4px solid {color};
        padding: 10px;
        border-radius: 5px;
        margin: 5px 0;
    '>
        <span style='font-size: 20px;'>{emoji}</span>
        <strong style='color: {color}; font-size: 14px;'> {text}</strong>
        <span style='color: #CCCCCC; margin-left: 10px;'>
            {'üü¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞' if zone_type == 'support' else 'üî¥ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ'}
        </span>
    </div>
    """

st.title("üìä Crypto Zone Alert System")
st.markdown("–ê–Ω–∞–ª–∏–∑ –∑–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å —Ç—Ä—ë—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤")

with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    ticker_input = st.text_input(
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", 
        value="BTCUSDT",
        help="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT)"
    ).upper()
    
    timeframe = st.selectbox(
        "–¢–∞–π–º—Ñ—Ä–µ–π–º",
        options=list(TIMEFRAMES.keys()),
        index=0,
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    lookback = st.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π",
        min_value=50,
        max_value=500,
        value=200,
        step=50,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=False)
    if auto_refresh:
        st.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥")
        refresh_interval = 60
    
    analyze_button = st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True, type="primary")

if analyze_button or auto_refresh:
    with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö {ticker_input} –Ω–∞ {timeframe}..."):
        zone_analyzer = get_zone_analyzer()
        chart_generator = get_chart_generator()
        
        try:
            df = zone_analyzer.fetch_ohlcv(ticker_input, timeframe, lookback)
            
            if df is None or len(df) < 20:
                st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker_input} –Ω–∞ {timeframe}")
                st.stop()
            
            current_price = zone_analyzer.get_current_price(ticker_input)
            
            if current_price is None:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
                st.stop()
            
            support_zones, resistance_zones, peaks, troughs, recent_peaks, recent_troughs = \
                zone_analyzer.find_support_resistance_zones(df, timeframe)
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${current_price:,.6f}")
            with col2:
                st.metric("üü¢ –ó–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", len(support_zones))
            with col3:
                st.metric("üî¥ –ó–æ–Ω—ã —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è", len(resistance_zones))
            with col4:
                st.metric("üìà –ü–∏–∫–∏/–í–ø–∞–¥–∏–Ω—ã", f"{len(peaks)}/{len(troughs)}")
            
            st.divider()
            
            chart_file = f"chart_{ticker_input}_{timeframe}_{datetime.now().timestamp()}.png"
            chart_path = chart_generator.generate_chart(
                df, ticker_input, timeframe, 
                support_zones, resistance_zones,
                peaks, troughs, recent_peaks, recent_troughs,
                current_price, chart_file
            )
            
            if chart_path and os.path.exists(chart_path):
                st.image(chart_path, use_container_width=True)
                try:
                    os.remove(chart_path)
                except:
                    pass
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
            
            st.divider()
            st.subheader("üö® –°—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–æ–≤")
            
            alerts_found = False
            
            if support_zones:
                st.markdown("### üü¢ –ó–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
                for i, zone in enumerate(support_zones[:3], 1):
                    alert_type = get_alert_status(current_price, zone, timeframe)
                    
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"**S{i}: ${zone['price']:,.6f}**")
                        st.caption(f"–î–∏–∞–ø–∞–∑–æ–Ω: ${zone['min_price']:,.6f} - ${zone['max_price']:,.6f}")
                        st.caption(f"–ö–∞—Å–∞–Ω–∏–π: {zone['touches']}")
                    
                    with col2:
                        if alert_type:
                            alert_html = display_alert_badge(alert_type, 'support')
                            if alert_html:
                                st.markdown(alert_html, unsafe_allow_html=True)
                                alerts_found = True
                        else:
                            st.info("–ù–µ—Ç –∞–ª–µ—Ä—Ç–∞")
                    
                    st.divider()
            
            if resistance_zones:
                st.markdown("### üî¥ –ó–æ–Ω—ã —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è")
                for i, zone in enumerate(resistance_zones[:3], 1):
                    alert_type = get_alert_status(current_price, zone, timeframe)
                    
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"**R{i}: ${zone['price']:,.6f}**")
                        st.caption(f"–î–∏–∞–ø–∞–∑–æ–Ω: ${zone['min_price']:,.6f} - ${zone['max_price']:,.6f}")
                        st.caption(f"–ö–∞—Å–∞–Ω–∏–π: {zone['touches']}")
                    
                    with col2:
                        if alert_type:
                            alert_html = display_alert_badge(alert_type, 'resistance')
                            if alert_html:
                                st.markdown(alert_html, unsafe_allow_html=True)
                                alerts_found = True
                        else:
                            st.info("–ù–µ—Ç –∞–ª–µ—Ä—Ç–∞")
                    
                    st.divider()
            
            if not alerts_found and (support_zones or resistance_zones):
                st.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤. –¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω.")
            
            if not support_zones and not resistance_zones:
                st.warning("‚ö†Ô∏è –ó–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π.")
            
            st.divider()
            st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –∞–ª–µ—Ä—Ç–æ–≤")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("""
                    **üîî –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï –ö –ó–û–ù–ï**
                    - –¶–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2% –æ—Ç –∑–æ–Ω—ã
                    - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é
                    - –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ–º
                """)
            
            with col2:
                st.markdown("""
                    **üéØ –í–•–û–î –í –ó–û–ù–£**
                    - –¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∑–æ–Ω—ã
                    - –í—Ä–µ–º—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
                    - –í–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –∏–ª–∏ –ø—Ä–æ–±–æ–π
                """)
            
            with col3:
                st.markdown("""
                    **üí• –ü–†–û–ë–ò–¢–ò–ï –ó–û–ù–´**
                    - –ó–æ–Ω–∞ –ø—Ä–æ–±–∏—Ç–∞
                    - –°–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                    - –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                """)
            
            if auto_refresh:
                import time
                time.sleep(refresh_interval)
                st.rerun()
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", exc_info=True)
else:
    st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'")
    
    st.markdown("""
    ### –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã
    
    –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ
    –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä—ë—Ö—É—Ä–æ–≤–Ω–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤:
    
    - **üîî –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ** - —Ü–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∑–æ–Ω–µ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2%)
    - **üéØ –í –∑–æ–Ω–µ** - —Ü–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∑–æ–Ω—ã
    - **üí• –ü—Ä–æ–±–∏—Ç–∏–µ** - –∑–æ–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–±–∏—Ç–∞
    
    #### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    1. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT)
    2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º (5m, 15m, 1h, 4h, 1d)
    3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    4. –ù–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
    
    #### –ß—Ç–æ –≤—ã —É–≤–∏–¥–∏—Ç–µ:
    - üìä –ì—Ä–∞—Ñ–∏–∫ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –∑–æ–Ω –∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –ª–∏–Ω–∏–π
    - üü¢ –ó–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–∑–µ–ª—ë–Ω—ã–µ)
    - üî¥ –ó–æ–Ω—ã —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–∫—Ä–∞—Å–Ω—ã–µ)
    - üìà –ü–∏–∫–∏ –∏ –≤–ø–∞–¥–∏–Ω—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    - üö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
    """)
