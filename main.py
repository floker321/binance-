# main.py
import asyncio
import logging
from typing import Optional
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from config import *
from data_manager import DataManager
from zone_analyzer import ZoneAnalyzer
from chart_generator import ChartGenerator
import os

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

data_manager = DataManager()
zone_analyzer = ZoneAnalyzer()
chart_generator = ChartGenerator()

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
ALL_TIMEFRAMES = ['5m', '15m', '1h', '4h', '1d']

async def start(update: Update, context: CallbackContext):
    welcome_message = """
ü§ñ Zone Alert Bot - –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑

–ö–æ–º–∞–Ω–¥—ã:
/add BTCUSDT - –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É
/remove BTCUSDT - —É–¥–∞–ª–∏—Ç—å
/list - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
/interval [continuous/5min] - —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
/status - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/chart BTCUSDT [5m/15m/1h/4h/1d] - –≥—Ä–∞—Ñ–∏–∫

üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: 5m, 15m, 1h, 4h, 1d
‚úÖ –ö–∞–∂–¥–∞—è –∑–æ–Ω–∞ = 1 –∞–ª–µ—Ä—Ç (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è)
"""
    await update.message.reply_text(welcome_message)

async def add_ticker(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä: /add BTCUSDT")
        return
    
    ticker = context.args[0].upper()
    if data_manager.add_ticker(user_id, ticker):
        await update.message.reply_text(f"‚úÖ {ticker} –¥–æ–±–∞–≤–ª–µ–Ω!\nüîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        for tf in ALL_TIMEFRAMES:
            await analyze_timeframe(user_id, ticker, tf, update)
    else:
        await update.message.reply_text(f"‚ö†Ô∏è {ticker} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")

async def remove_ticker(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä: /remove BTCUSDT")
        return
    
    ticker = context.args[0].upper()
    if data_manager.remove_ticker(user_id, ticker):
        await update.message.reply_text(f"‚úÖ {ticker} —É–¥–∞–ª—ë–Ω")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def list_tickers(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    tickers = data_manager.get_tickers(user_id)
    if not tickers:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add TICKER")
        return
    
    message = "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏:\n\n" + "\n".join(f"‚Ä¢ {t}" for t in tickers)
    message += f"\n\n‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(ALL_TIMEFRAMES)}"
    await update.message.reply_text(message)

async def set_interval(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ: /interval continuous –∏–ª–∏ /interval 5min")
        return
    
    interval = context.args[0].lower()
    if interval not in ['continuous', '5min']:
        await update.message.reply_text("–î–æ–ø—É—Å—Ç–∏–º–æ: continuous –∏–ª–∏ 5min")
        return
    
    data_manager.set_interval(user_id, interval)
    freq_text = '–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É' if interval == 'continuous' else '–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç'
    await update.message.reply_text(f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {freq_text}")

async def status(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    user_data = data_manager.get_user_data(user_id)
    interval = "–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É" if user_data['interval'] == "continuous" else "–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
    
    message = f"""
üìä –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

‚è± –ß–∞—Å—Ç–æ—Ç–∞: {interval}
üìà –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(ALL_TIMEFRAMES)}
üíº –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {len(user_data['tickers'])} –º–æ–Ω–µ—Ç
"""
    await update.message.reply_text(message)

async def get_chart(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä: /chart BTCUSDT [5m]")
        return
    
    ticker = context.args[0].upper()
    timeframe = context.args[1] if len(context.args) > 1 else '5m'
    
    if timeframe not in ALL_TIMEFRAMES:
        await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(ALL_TIMEFRAMES)}")
        return
    
    await update.message.reply_text(f"üìä –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ {ticker} –Ω–∞ {timeframe}...")
    await analyze_timeframe(user_id, ticker, timeframe, update, force_chart=True)

async def analyze_timeframe(user_id: str, ticker: str, timeframe: str, 
                           update: Optional[Update] = None, force_chart: bool = False):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º"""
    try:
        df = await asyncio.to_thread(zone_analyzer.fetch_ohlcv, ticker, timeframe, 200)
        
        if df is None or len(df) < 20:
            if force_chart and update:
                await update.message.reply_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker} –Ω–∞ {timeframe}")
            return
        
        support_zones, resistance_zones, peaks, troughs, recent_peaks, recent_troughs = \
            zone_analyzer.find_support_resistance_zones(df, timeframe)
        
        data_manager.update_zones(user_id, ticker, timeframe, support_zones, resistance_zones)
        current_price = await asyncio.to_thread(zone_analyzer.get_current_price, ticker)

        # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
        if force_chart and update:
            chart_file = f"chart_{user_id}_{ticker}_{timeframe}.png"
            chart_path = chart_generator.generate_chart(
                df, ticker, timeframe, support_zones, resistance_zones,
                peaks, troughs, recent_peaks, recent_troughs,
                current_price, chart_file
            )
            
            if chart_path and os.path.exists(chart_path):
                zones_info = f"üìä {ticker} - {timeframe.upper()}\nüí∞ ${current_price:.6f}\n\n"
                
                if support_zones:
                    zones_info += "üü¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n"
                    for i, z in enumerate(support_zones[:3], 1):
                        zones_info += f"S{i}: ${z['price']:.6f} ({z['touches']} –∫–∞—Å–∞–Ω–∏–π)\n"
                
                if resistance_zones:
                    zones_info += "\nüî¥ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ:\n"
                    for i, z in enumerate(resistance_zones[:3], 1):
                        zones_info += f"R{i}: ${z['price']:.6f} ({z['touches']} –∫–∞—Å–∞–Ω–∏–π)\n"
                
                with open(chart_path, 'rb') as f:
                    await update.message.reply_photo(f, caption=zones_info)
                os.remove(chart_path)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {ticker} {timeframe}: {e}")
        if force_chart and update:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def check_alerts(context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º"""
    all_users = data_manager.get_all_users()
    
    for user_id in all_users:
        try:
            tickers = data_manager.get_tickers(user_id)
            
            for ticker in tickers:
                current_price = await asyncio.to_thread(zone_analyzer.get_current_price, ticker)
                if current_price is None:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
                for timeframe in ALL_TIMEFRAMES:
                    zones = data_manager.get_zones(user_id, ticker, timeframe)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    for zone in zones.get('support', []):
                        alert_type, zone_key = zone_analyzer.check_price_alert(
                            current_price, zone, timeframe
                        )
                        
                        if alert_type and zone_key:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —É–∂–µ –∞–ª–µ—Ä—Ç –¥–ª—è —ç—Ç–æ–π –∑–æ–Ω—ã
                            if not data_manager.is_alert_sent(user_id, ticker, zone_key):
                                await send_alert(context, user_id, ticker, timeframe, 
                                               alert_type, zone, current_price)
                                # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                                data_manager.mark_alert_sent(user_id, ticker, zone_key)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                    for zone in zones.get('resistance', []):
                        alert_type, zone_key = zone_analyzer.check_price_alert(
                            current_price, zone, timeframe
                        )
                        
                        if alert_type and zone_key:
                            if not data_manager.is_alert_sent(user_id, ticker, zone_key):
                                await send_alert(context, user_id, ticker, timeframe,
                                               alert_type, zone, current_price)
                                data_manager.mark_alert_sent(user_id, ticker, zone_key)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {user_id}: {e}")

async def send_alert(context: CallbackContext, user_id: str, ticker: str, 
                    timeframe: str, alert_type: str, zone: dict, current_price: float):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        zone_type = "üü¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞" if zone['type'] == 'support' else "üî¥ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ"
        zone_price = zone['price']
        
        if alert_type == 'approaching':
            emoji = "üîî"
            title = "–ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï –ö –ó–û–ù–ï"
            description = f"–¶–µ–Ω–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –∑–æ–Ω–µ {zone_type.lower()}"
        elif alert_type == 'in_zone':
            emoji = "üéØ"
            title = "–í–•–û–î –í –ó–û–ù–£"
            description = f"–¶–µ–Ω–∞ –≤–æ—à–ª–∞ –≤ –∑–æ–Ω—É {zone_type.lower()}"
        elif alert_type == 'broken':
            emoji = "üí•"
            title = "–ü–†–û–ë–ò–¢–ò–ï –ó–û–ù–´"
            description = f"–ó–æ–Ω–∞ {zone_type.lower()} –ø—Ä–æ–±–∏—Ç–∞!"
            # –ü—Ä–∏ –ø—Ä–æ–±–∏—Ç–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            data_manager.reset_alerts_for_ticker(user_id, ticker)
        else:
            return
        
        message = f"""
{emoji} {title}

üìä {ticker} - {timeframe.upper()}
üí∞ –¶–µ–Ω–∞: ${current_price:.6f}
{zone_type}: ${zone_price:.6f}
üí™ –ö–∞—Å–∞–Ω–∏–π: {zone.get('touches', 0)}

{description}
"""
        
        await context.bot.send_message(chat_id=user_id, text=message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        df = await asyncio.to_thread(zone_analyzer.fetch_ohlcv, ticker, timeframe, 200)
        if df is not None:
            support_zones, resistance_zones, peaks, troughs, recent_peaks, recent_troughs = \
                zone_analyzer.find_support_resistance_zones(df, timeframe)
            
            chart_path = chart_generator.generate_chart(
                df, ticker, timeframe, support_zones, resistance_zones,
                peaks, troughs, recent_peaks, recent_troughs,
                current_price, f"alert_{user_id}_{ticker}_{timeframe}.png"
            )
            
            if chart_path and os.path.exists(chart_path):
                with open(chart_path, 'rb') as photo:
                    await context.bot.send_photo(chat_id=user_id, photo=photo)
                os.remove(chart_path)
        
        logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {ticker} {timeframe} {alert_type} -> user {user_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")

async def periodic_check(context: CallbackContext):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)"""
    await check_alerts(context)

def main():
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_ticker))
    application.add_handler(CommandHandler("remove", remove_ticker))
    application.add_handler(CommandHandler("list", list_tickers))
    application.add_handler(CommandHandler("interval", set_interval))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("chart", get_chart))
    
    job_queue = application.job_queue
    job_queue.run_repeating(periodic_check, interval=60, first=10)
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìä –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {', '.join(ALL_TIMEFRAMES)}")
    print("‚úÖ 1 –∑–æ–Ω–∞ = 1 –∞–ª–µ—Ä—Ç (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤)")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()